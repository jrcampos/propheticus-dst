"""
Contains the code required to perform batch execution of the framework
"""
import copy
import propheticus.core.BatchExecution


class InstanceBatchExecution(propheticus.core.BatchExecution):
    """
    Contains the code required to perform batch execution of the framework

    ...

    Attributes
    ----------
    """
    def __init__(self, Context):
        super(InstanceBatchExecution, self).__init__(Context)

        # self.display_visuals = False

        self.Processes = [
            {'method': 'parseCurrentConfigurationAlgorithms', 'arguments': [None, True]},
            # oUI.dataAnalysis('boxPlots'),
            # oUI.dataAnalysis('lineGraphs'),
            # oUI.dataAnalysis('correlationMatrixPlot'),
            # oUI.dataAnalysis('descriptiveAnalysis'),
        ]

        BinaryClassification = [
            # True,
            False
        ]

        Datasets = [
            # ['glibc.files'],
            # ['httpd.files'],
            ['mozilla.files'],
            # ['xen.files']
        ]

        DimensionalityReduction = [
            ['variance'],
            # ['variance', 'correlation']
        ]

        DataBalancing = [
            [],
            ['RandomUnderSampler'],
            ['RandomUnderSampler', 'SMOTE'],
        ]

        ClassificationAlgorithms = {
            'decision_tree': [None]
            # 'random_forests': propheticus.shared.Utils.cartesianProductDictionaryLists(
            #     n_estimators=[20, 100],
            #     criterion=['entropy', 'gini']
            # )
        }

        UndersamplingThresholdByAlgorithm = {
            'default': 10000
        }

        FilterFeatures = [
            None
        ]

        InitialConfiguration = {}
        InitialConfiguration['config_seed_count'] = 30
        InitialConfiguration['config_grid_search'] = False

        for classification_mode in BinaryClassification:
            for index, Dataset in enumerate(Datasets):
                for dimensionality_reduction in DimensionalityReduction:
                    for data_balancing in DataBalancing:
                        for Filters in FilterFeatures:
                            # TODO: improve the following logic to allow passing more than one algorithm to improve performance
                            # TODO: use something similar to itertools but be aware of different lenghts in configs; itertools.product stops at the minimum length
                            for classification_algorithm, AlgorithmsParameters in ClassificationAlgorithms.items():
                                for AlgorithmsConfiguration in AlgorithmsParameters:
                                    Configuration = copy.deepcopy(InitialConfiguration)
                                    Configuration['config_undersampling_threshold'] = UndersamplingThresholdByAlgorithm[classification_algorithm] if classification_algorithm in UndersamplingThresholdByAlgorithm else UndersamplingThresholdByAlgorithm['default']
                                    Configuration['config_binary_classification'] = classification_mode

                                    Configuration['datasets'] = Dataset

                                    Configuration['pre_filter_feature_values'] = []
                                    if Filters is not None:
                                        for Filter in Filters:
                                            Filter['label'] += ': ' + Filter['values']
                                        Configuration['pre_filter_feature_values'] = Filters

                                    Configuration['proc_balance_data'] = data_balancing
                                    Configuration['proc_classification'] = [classification_algorithm]
                                    Configuration['proc_classification_algorithms_parameters'] = {}
                                    if AlgorithmsConfiguration is not None:
                                        Configuration['proc_classification_algorithms_parameters'] = {classification_algorithm: AlgorithmsConfiguration}
                                    Configuration['proc_reduce_dimensionality'] = dimensionality_reduction

                                    self.Configurations.append(Configuration)



